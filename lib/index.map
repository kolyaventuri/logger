{"version":3,"sources":["types.js","constants.js","colors.js","logger.js","index.js"],"names":["SCOPE","INFO","ERROR","typeMap","types","open","close","reset","fgRed","fgGreen","fgCyan","color","code","colors","RESET","RED","GREEN","CYAN","codes","tagColors","colorize","text","openColor","log","data","args","_type","type","scope","_color","extraArgs","methodName","method","console","typeTagRaw","typeTag","scopeTagRaw","timestamp","Date","noop","Logger","database","save","logResult","logInfo","info","logError","error"],"mappings":"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","file":"index.map","sourceRoot":"..\\src","sourcesContent":["// @noflow\r\n\r\nexport const SCOPE = 'SCOPE';\r\nexport const INFO = 'INFO';\r\nexport const ERROR = 'ERROR';\r\n","// @noflow\r\nimport * as types from './types';\r\n\r\nexport const typeMap = {\r\n  [types.INFO]: 'log',\r\n  [types.ERROR]: 'error'\r\n};\r\n","// @flow\r\nimport * as types from './types';\r\n\r\nconst open = '\\u001B[';\r\nconst close = 'm';\r\n\r\nconst reset = 0;\r\n\r\nconst fgRed = 31;\r\nconst fgGreen = 32;\r\nconst fgCyan = 36;\r\n\r\nconst color = code => `${open}${code}${close}`;\r\n\r\nexport const colors = {\r\n  RESET: 'RESET',\r\n\r\n  RED: 'RED',\r\n  GREEN: 'GREEN',\r\n  CYAN: 'CYAN'\r\n};\r\ntype Color = $Keys<typeof colors>;\r\n\r\nconst codes = {\r\n  [colors.RESET]: color(reset),\r\n\r\n  [colors.RED]: color(fgRed),\r\n  [colors.GREEN]: color(fgGreen),\r\n  [colors.CYAN]: color(fgCyan)\r\n};\r\n\r\nexport const tagColors = {\r\n  [types.SCOPE]: colors.GREEN,\r\n  [types.INFO]: colors.CYAN,\r\n  [types.ERROR]: colors.RED\r\n};\r\n\r\nexport const colorize = (color: Color, text: string) => {\r\n  const reset = codes[colors.RESET];\r\n  const openColor = codes[color];\r\n\r\n  return `${openColor}${text}${reset}`;\r\n};\r\n","// @flow\r\n\r\nimport {typeMap} from './constants';\r\nimport * as types from './types';\r\nimport {tagColors as colors, colorize} from './colors';\r\n\r\ntype ArgType = {[string]: any};\r\n\r\nexport const log = (data: any, args: ArgType = {}) => {\r\n  const {type: _type, scope, color: _color, ...extraArgs} = args;\r\n  const type = _type || types.INFO;\r\n  const color = !(_color === false); // If `color` is undefined, it should still be true\r\n\r\n  const methodName = typeMap[type] || 'log';\r\n  const method = console[methodName];\r\n\r\n  const typeTagRaw = `[${type}]`;\r\n  const typeTag = color ? colorize(colors[type], typeTagRaw) : typeTagRaw;\r\n\r\n  if (scope) {\r\n    const scopeTagRaw = `[${scope}]`;\r\n    const scopeTag = color ? colorize(colors[types.SCOPE], scopeTagRaw) : scopeTagRaw;\r\n    method(scopeTag, typeTag, data);\r\n  } else {\r\n    method(typeTag, data);\r\n  }\r\n\r\n  return {\r\n    data,\r\n    type,\r\n    scope,\r\n    timestamp: new Date(),\r\n    ...extraArgs\r\n  };\r\n};\r\n","// @flow\r\n\r\nimport {log} from './logger';\r\nimport * as types from './types';\r\n\r\ntype DatabaseType = {\r\n  save: (data: any) => void\r\n};\r\n\r\ntype ArgType = {\r\n  scope?: string,\r\n  database?: DatabaseType,\r\n  color?: boolean\r\n};\r\n\r\nconst noop = () => {};\r\n\r\nexport default class Logger {\r\n  scope: string | null;\r\n\r\n  database: DatabaseType;\r\n\r\n  color: boolean;\r\n\r\n  constructor({scope, database, color}: ArgType = {}) {\r\n    this.scope = scope || null;\r\n    this.database = database || {save: noop};\r\n    this.color = !(color === false);\r\n  }\r\n\r\n  log = (data: any, args: {[string]: any} = {}) => {\r\n    const {scope, database, color} = this;\r\n    let {type, ...extraArgs} = args;\r\n    type = type || types.INFO;\r\n\r\n    const logResult = log(data, {type, scope, color, ...extraArgs});\r\n\r\n    if (typeof database.save === 'function') {\r\n      database.save(logResult);\r\n    }\r\n  }\r\n\r\n  logInfo = (info: any) => {\r\n    this.log(info);\r\n  }\r\n\r\n  logError = (error: any) => {\r\n    this.log(error, {type: types.ERROR});\r\n  }\r\n}\r\n"]}