{"version":3,"sources":["constants.js","types.js","logger.js","index.js"],"names":["allowedTypes","INFO","ERROR","log","data","args","type","scope","extraArgs","method","console","includes","types","timestamp","Date","noop","Logger","database","save","logResult","logInfo","info","logError","error"],"mappings":"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","file":"index.map","sourceRoot":"..\\src","sourcesContent":["// @noflow\r\n\r\nexport const allowedTypes = ['info', 'error'];\r\n","// @noflow\r\n\r\nexport const INFO = 'log';\r\nexport const ERROR = 'error';\r\n","// @flow\r\n\r\nimport {allowedTypes} from './constants';\r\nimport * as types from './types';\r\n\r\ntype ArgType = {[string]: any};\r\n\r\nexport const log = (data: any, args: ArgType = {}) => {\r\n  const {type, scope, ...extraArgs} = args;\r\n\r\n  let method = console.log;\r\n  if (allowedTypes.includes(type)) {\r\n    method = console[type];\r\n  }\r\n\r\n  if (scope) {\r\n    const scopeString = `[${scope}]`;\r\n    method(scopeString, data);\r\n  } else {\r\n    method(data);\r\n  }\r\n\r\n  return {\r\n    data,\r\n    type: type || types.INFO,\r\n    scope,\r\n    timestamp: new Date(),\r\n    ...extraArgs\r\n  };\r\n};\r\n","// @flow\r\n\r\nimport {log} from './logger';\r\nimport * as types from './types';\r\n\r\ntype DatabaseType = {\r\n  save: (data: any) => void\r\n};\r\n\r\ntype ArgType = {\r\n  scope?: string,\r\n  database?: DatabaseType\r\n};\r\n\r\nconst noop = () => {};\r\n\r\nexport default class Logger {\r\n  scope: string | null;\r\n\r\n  database: DatabaseType;\r\n\r\n  constructor({scope, database}: ArgType = {}) {\r\n    this.scope = scope || null;\r\n    this.database = database || {save: noop};\r\n  }\r\n\r\n  log = (data: any, args: {[string]: any} = {}) => {\r\n    const {scope, database} = this;\r\n    let {type, ...extraArgs} = args;\r\n    type = type || types.INFO;\r\n\r\n    const logResult = log(data, {type, scope, ...extraArgs});\r\n\r\n    if (typeof database.save === 'function') {\r\n      database.save(logResult);\r\n    }\r\n  }\r\n\r\n  logInfo = (info: any) => {\r\n    this.log(info);\r\n  }\r\n\r\n  logError = (error: any) => {\r\n    this.log(error, {type: types.ERROR});\r\n  }\r\n}\r\n"]}